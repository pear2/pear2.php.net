<?xml version="1.0" encoding="UTF-8"?>
<r xmlns="http://pear.php.net/dtd/rest.release" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://pear.php.net/dtd/rest.release http://pear.php.net/dtd/rest.release.xsd">
 <p xlink:href="rest/p/pear2_net_transmitter">PEAR2_Net_Transmitter</p>
 <c>pear2.php.net</c>
 <v>1.0.0a4</v>
 <st>alpha</st>
 <l>LGPL License 2.1</l>
 <m>boen_robot</m>
 <s>Wrapper for network stream functionality.
</s>
 <d>PHP has built in support for various types of network streams, such as HTTP and TCP sockets. One problem that arises with them is the fact that a single fread/fwrite call might not read/write all the data you intended, regardless of whether you're in blocking mode or not. While the PHP manual offers a workaround in the form of a loop with a few variables, using it every single time you want to read/write can be tedious.

This package abstracts this away, so that when you want to get exactly N amount of bytes, you can be sure the upper levels of your app will be dealing with N bytes. Oh, and the functionality is nicely wrapped in an object (but that's just the icing on the cake).</d>
 <da>2013-08-15 18:20:49</da>
 <n>* Support for encrypted connections. Note that due to known issues with PHP itself, encrypted connections may be unstable (as in &quot;sometimes disconnect suddenly&quot; or &quot;sometimes hang when calling TcpClient::isDataAwaiting() without a timeout&quot;).
* Stream::isAcceptingData() and Stream::isDataAwaiting() now accept an optional timeout, modeled after stream_select().
* Changed sending to retry indefinetly unless the connection is broken, thanks to isDataAwaiting()'s new ability. Receiving can still timeout.
* Chnaged the PHAR stub to not fail when reading the hash fails.
* Doc and CS fixes.</n>
 <f>238480</f>
 <g>http://pear2.php.net/get/PEAR2_Net_Transmitter-1.0.0a4</g>
 <x xlink:href="package.1.0.0a4.xml"/>
</r>
